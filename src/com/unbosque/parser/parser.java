
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.unbosque.parser;

import com.unbosque.ast.*;
import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\027\000\002\002\004\000\002\002\007\000\002\003" +
    "\003\000\002\003\004\000\002\005\011\000\002\006\006" +
    "\000\002\007\006\000\002\010\006\000\002\011\003\000" +
    "\002\011\005\000\002\012\003\000\002\012\003\000\002" +
    "\012\003\000\002\012\003\000\002\013\003\000\002\013" +
    "\004\000\002\015\010\000\002\016\005\000\002\017\005" +
    "\000\002\020\005\000\002\021\003\000\002\021\004\000" +
    "\002\023\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\074\000\004\004\005\001\002\000\004\002\076\001" +
    "\002\000\004\025\006\001\002\000\004\005\011\001\002" +
    "\000\006\005\011\012\043\001\002\000\006\005\uffff\012" +
    "\uffff\001\002\000\004\022\012\001\002\000\004\025\013" +
    "\001\002\000\004\006\014\001\002\000\004\025\040\001" +
    "\002\000\004\007\016\001\002\000\004\025\035\001\002" +
    "\000\004\010\021\001\002\000\004\024\034\001\002\000" +
    "\004\025\022\001\002\000\012\011\026\015\025\016\027" +
    "\017\024\001\002\000\006\024\032\026\031\001\002\000" +
    "\006\024\ufff4\026\ufff4\001\002\000\006\024\ufff6\026\ufff6" +
    "\001\002\000\006\024\ufff7\026\ufff7\001\002\000\006\024" +
    "\ufff5\026\ufff5\001\002\000\006\024\ufff9\026\ufff9\001\002" +
    "\000\012\011\026\015\025\016\027\017\024\001\002\000" +
    "\004\024\ufffa\001\002\000\006\024\ufff8\026\ufff8\001\002" +
    "\000\006\005\ufffd\012\ufffd\001\002\000\012\011\026\015" +
    "\025\016\027\017\024\001\002\000\006\024\037\026\031" +
    "\001\002\000\004\010\ufffb\001\002\000\012\011\026\015" +
    "\025\016\027\017\024\001\002\000\006\024\042\026\031" +
    "\001\002\000\004\007\ufffc\001\002\000\004\020\060\001" +
    "\002\000\006\012\ufff3\013\ufff3\001\002\000\006\005\ufffe" +
    "\012\ufffe\001\002\000\006\012\043\013\047\001\002\000" +
    "\004\014\054\001\002\000\006\012\ufff2\013\ufff2\001\002" +
    "\000\006\002\uffed\013\uffed\001\002\000\006\002\000\013" +
    "\047\001\002\000\006\002\uffec\013\uffec\001\002\000\004" +
    "\023\055\001\002\000\004\022\056\001\002\000\004\024" +
    "\057\001\002\000\006\002\uffeb\013\uffeb\001\002\000\004" +
    "\014\061\001\002\000\004\025\062\001\002\000\004\021" +
    "\063\001\002\000\004\025\074\001\002\000\004\024\073" +
    "\001\002\000\004\026\066\001\002\000\004\021\067\001" +
    "\002\000\004\025\071\001\002\000\004\024\ufff0\001\002" +
    "\000\004\022\072\001\002\000\004\024\uffee\001\002\000" +
    "\006\012\ufff1\013\ufff1\001\002\000\004\022\075\001\002" +
    "\000\004\026\uffef\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\074\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\003\006\005\007\001\001\000\010" +
    "\005\044\013\045\015\043\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\006\014\001\001" +
    "\000\002\001\001\000\004\007\016\001\001\000\002\001" +
    "\001\000\004\010\017\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\011\022\012\027\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\012\032\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\011\035\012\027\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\011\040\012\027\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\015\047\021\051\023\050" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\023\052\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\016\063" +
    "\017\064\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\020\067\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public Document document = new Document("HTML", "", null);
    private TrainingTag training_tag_node = new TrainingTag("TABLE", "", null);
    private PersonsTag persons_tag_node = new PersonsTag("TABLE", "", null);
    private AssignmentsTag assignments_tag_node = new AssignmentsTag("TABLE", "", null);
        
    public void report_error(String message, Object info) {
        StringBuilder m = new StringBuilder("Error");
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {                
                m.append(" in line " + (s.left + 1));   
                if (s.right >= 0)                    
                    m.append(", column " + (s.right + 1));
            }
        }
        m.append(" : " + message);
        System.err.println(m);
    }

    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }
    
    public void initTables() {
        TagAttribute ta = new TagAttribute("border", "1");
        ArrayList<TagAttribute> ta_arr = new ArrayList<>();
        ta_arr.add(ta);
        training_tag_node = new TrainingTag("TABLE", "", ta_arr); 
        persons_tag_node = new PersonsTag("TABLE", "", ta_arr);
        assignments_tag_node = new AssignmentsTag("TABLE", "", ta_arr);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= document EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Document start_val = (Document)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // document ::= PLAN_ENTRENAMIENTO COLON training_tag persons_tag assignments_tag 
            {
              Document RESULT =null;
		 
                HTMLNode head_tag = new HTMLNode("HEAD", "", null);
                HTMLNode body_tag = new HTMLNode("BODY", "", null);
                document.addChild(head_tag);
                document.addChild(body_tag);
                body_tag.addChild(training_tag_node);
                body_tag.addChild(persons_tag_node);
                body_tag.addChild(assignments_tag_node);
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("document",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // training_tag ::= training 
            {
              TrainingTag RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("training_tag",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // training_tag ::= training_tag training 
            {
              TrainingTag RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		TrainingTag t = (TrainingTag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                    training_tag_node.addChild(t);
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("training_tag",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // training ::= ENTRENAMIENTO STRING_ATTRIBUTES COLON warmup_block tactics_block freeplay_block SEMICOLON 
            {
              Training RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int wleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		WarmUpBlock w = (WarmUpBlock)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		TacticsBlock t = (TacticsBlock)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		FreePlayBlock f = (FreePlayBlock)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                Training trainingNode = new Training("TR", "", null);
                trainingNode.addChild(new HTMLNode("TD", s, null));
                trainingNode.addChild(w);
                trainingNode.addChild(t);
                trainingNode.addChild(f);
                RESULT = trainingNode;
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("training",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // warmup_block ::= CALENTAMIENTO COLON activities_group SEMICOLON 
            {
              WarmUpBlock RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Activity> a = (List<Activity>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                    WarmUpBlock warmUpNode = new WarmUpBlock("TD", "", null);
                    for (Activity act : a) {
                        warmUpNode.addChild(act);
                    }
                    RESULT = warmUpNode;
                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("warmup_block",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // tactics_block ::= TACTICA COLON activities_group SEMICOLON 
            {
              TacticsBlock RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Activity> a = (List<Activity>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                     TacticsBlock tacticsNode = new TacticsBlock("TD", "", null);
                     for (Activity act : a) {
                         tacticsNode.addChild(act);
                     }
                     RESULT = tacticsNode;
                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tactics_block",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // freeplay_block ::= JUEGO_LIBRE COLON activities_group SEMICOLON 
            {
              FreePlayBlock RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List<Activity> a = (List<Activity>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                      FreePlayBlock freePlayNode = new FreePlayBlock("TD", "", null);
                      for (Activity act : a) {
                          freePlayNode.addChild(act);
                      }
                      RESULT = freePlayNode;
                  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("freeplay_block",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // activities_group ::= activity 
            {
              List<Activity> RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("activities_group",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // activities_group ::= activities_group COMMA activity 
            {
              List<Activity> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List<Activity> a = (List<Activity>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Activity c = (Activity)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                        List<Activity> list = new ArrayList<>();
                        list.add(c);
                        list.addAll(a);
                        RESULT = list;
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("activities_group",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // activity ::= ACTIVITY 
            {
              Activity RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("activity",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // activity ::= REPETITIONS 
            {
              Activity RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("activity",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // activity ::= TEAM 
            {
              Activity RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("activity",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // activity ::= PASS_CONDITION 
            {
              Activity RESULT =null;
		 
                
            
              CUP$parser$result = parser.getSymbolFactory().newSymbol("activity",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // persons_tag ::= person 
            {
              PersonsTag RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("persons_tag",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // persons_tag ::= persons_tag person 
            {
              PersonsTag RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		PersonsTag p = (PersonsTag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                   persons_tag_node.addChild(p);
               
              CUP$parser$result = parser.getSymbolFactory().newSymbol("persons_tag",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // person ::= PERSONA PERSON_ROLE PERSON_ID COLON person_attributes SEMICOLON 
            {
              Person RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		PersonAttributes a = (PersonAttributes)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
              Person personNode = new Person("TR", "", null);
              personNode.addChild(new HTMLNode("TD", r, null));
              personNode.addChild(new HTMLNode("TD", i, null));
              personNode.addChild(a);
              RESULT = personNode;
          
              CUP$parser$result = parser.getSymbolFactory().newSymbol("person",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // person_attributes ::= person_name_attribute COMMA person_role_attribute 
            {
              PersonAttributes RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		PersonNameAttribute n = (PersonNameAttribute)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		PersonRoleAttribute r = (PersonRoleAttribute)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                         PersonAttributes personAttributesNode = new PersonAttributes("TD", "", null);
                         personAttributesNode.addChild(n);
                         personAttributesNode.addChild(r);
                         RESULT = personAttributesNode;
                     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("person_attributes",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // person_name_attribute ::= PERSON_ATTRIBUTES COLON STRING_ATTRIBUTES 
            {
              PersonNameAttribute RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                            PersonNameAttribute personNameAttrNode = new PersonNameAttribute("TD", s, null);
                            RESULT = personNameAttrNode;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("person_name_attribute",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // person_role_attribute ::= PERSON_ATTRIBUTES COLON STRING_ATTRIBUTES 
            {
              PersonRoleAttribute RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 
                            PersonRoleAttribute personRoleAttrNode = new PersonRoleAttribute("TD", s, null);
                            RESULT = personRoleAttrNode;
                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("person_role_attribute",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // assignments_tag ::= assignment 
            {
              AssignmentsTag RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignments_tag",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // assignments_tag ::= assignments_tag assignment 
            {
              AssignmentsTag RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AssignmentsTag a = (AssignmentsTag)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                       assignments_tag_node.addChild(a);
                   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignments_tag",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // assignment ::= ASIGNACION PERSON_ID ASIGNATION_TOKEN STRING_ATTRIBUTES SEMICOLON 
            {
              Assignment RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                  Assignment assignmentNode = new Assignment("TR", "", null);
                  assignmentNode.addChild(new HTMLNode("TD", i, null));
                  assignmentNode.addChild(new HTMLNode("TD", s, null));
                  RESULT = assignmentNode;
              
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
