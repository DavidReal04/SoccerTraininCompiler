// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: C:/Users/Real4/OneDrive/Documentos/Universidad/Ingeniería de Sistemas/8vo Semestre/Compiladores/SoccerTrainingCompiler/src/com/unbosque/lexer/TokenizerSoccerTraining.flex

package com.unbosque.lexer;

import com.unbosque.parser.sym;

import java_cup.runtime.*;


@SuppressWarnings("fallthrough")
public
class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\u10ff\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\10\0\1\1\1\2\1\3\1\0\1\2\1\4\22\0"+
    "\1\2\1\0\1\5\5\0\1\6\1\7\1\0\1\10"+
    "\1\11\1\12\2\0\1\13\2\0\1\14\5\0\1\15"+
    "\1\16\1\17\5\0\1\20\1\0\1\21\1\0\1\22"+
    "\4\0\1\23\1\0\1\24\1\0\1\25\1\0\1\26"+
    "\1\0\1\27\1\0\1\30\5\0\1\31\1\32\1\33"+
    "\1\34\3\0\1\35\1\36\1\37\1\40\1\41\1\0"+
    "\1\42\1\0\1\43\2\0\1\44\1\45\1\46\1\47"+
    "\1\50\1\0\1\51\1\52\1\53\1\54\1\55\1\0"+
    "\1\56\1\57\1\60\1\61\1\62\1\63\103\0\1\64"+
    "\7\0\1\65\3\0\1\66\5\0\1\67\6\0\1\70"+
    "\6\0\1\71\7\0\1\72\3\0\1\73\5\0\1\74"+
    "\6\0\1\75\u0105\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[512];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\2\1\2\2\2\1\1\3\1\4\1\5\10\1"+
    "\15\0\1\6\34\0\1\7\36\0\1\10\1\0\1\11"+
    "\34\0\1\12\1\0\1\13\3\0\1\14\4\0\1\15"+
    "\21\0\1\16\1\0\1\17\7\0\1\20\16\0\1\21"+
    "\3\0\1\22\1\0\1\23\1\0\1\24\6\0\1\25";

  private static int [] zzUnpackAction() {
    int [] result = new int[192];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\76\0\174\0\76\0\272\0\370\0\u0136\0\76"+
    "\0\76\0\76\0\u0174\0\u01b2\0\u01f0\0\u022e\0\u026c\0\u02aa"+
    "\0\u02e8\0\u0326\0\u0364\0\u03a2\0\u03e0\0\u041e\0\u045c\0\u049a"+
    "\0\u04d8\0\u0516\0\u0554\0\u0592\0\u05d0\0\u060e\0\u064c\0\76"+
    "\0\u068a\0\u06c8\0\u0706\0\u0744\0\u0782\0\u07c0\0\u07fe\0\u083c"+
    "\0\u087a\0\u08b8\0\u08f6\0\u0934\0\u0972\0\u09b0\0\u09ee\0\u0a2c"+
    "\0\u0a6a\0\u0aa8\0\u0ae6\0\u0b24\0\u0b62\0\u0ba0\0\u0bde\0\u0c1c"+
    "\0\u0c5a\0\u0c98\0\u0cd6\0\u0d14\0\76\0\u0d52\0\u0d90\0\u0dce"+
    "\0\u0e0c\0\u0e4a\0\u0e88\0\u0ec6\0\u0f04\0\u0f42\0\u0f80\0\u0fbe"+
    "\0\u0ffc\0\u103a\0\u1078\0\u10b6\0\u10f4\0\u1132\0\u1170\0\u11ae"+
    "\0\u11ec\0\u122a\0\u1268\0\u12a6\0\u12e4\0\u1322\0\u1360\0\u139e"+
    "\0\u13dc\0\u141a\0\u1458\0\76\0\u1496\0\76\0\u14d4\0\u1512"+
    "\0\u1550\0\u158e\0\u15cc\0\u160a\0\u1648\0\u1686\0\u16c4\0\u1702"+
    "\0\u1740\0\u177e\0\u17bc\0\u17fa\0\u1838\0\u1876\0\u18b4\0\u18f2"+
    "\0\u1930\0\u196e\0\u19ac\0\u19ea\0\u1a28\0\u1a66\0\u1aa4\0\u1ae2"+
    "\0\u1b20\0\u1b5e\0\76\0\u1b9c\0\76\0\u1bda\0\u1c18\0\u1c56"+
    "\0\76\0\u1c94\0\u1cd2\0\u1d10\0\u1d4e\0\76\0\u1d8c\0\u1dca"+
    "\0\u1e08\0\u1e46\0\u1e84\0\u1ec2\0\u1f00\0\u1f3e\0\u1f7c\0\u1fba"+
    "\0\u1ff8\0\u2036\0\u2074\0\u20b2\0\u20f0\0\u212e\0\u216c\0\76"+
    "\0\u21aa\0\76\0\u21e8\0\u2226\0\u2264\0\u22a2\0\u22e0\0\u231e"+
    "\0\u235c\0\76\0\u239a\0\u23d8\0\u2416\0\u2454\0\u2492\0\u24d0"+
    "\0\u250e\0\u254c\0\u258a\0\u25c8\0\u2606\0\u2644\0\u2682\0\u26c0"+
    "\0\76\0\u26fe\0\u273c\0\u277a\0\76\0\u27b8\0\76\0\u27f6"+
    "\0\76\0\u2834\0\u2872\0\u28b0\0\u28ee\0\u292c\0\u296a\0\76";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[192];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\2\4\1\5\1\6\1\7\2\2\1\10"+
    "\4\2\1\11\1\12\1\13\1\14\1\15\1\16\2\2"+
    "\1\17\1\2\1\20\1\2\1\21\5\2\1\22\35\2"+
    "\133\0\1\23\43\0\1\4\124\0\1\24\121\0\1\25"+
    "\71\0\1\26\60\0\1\27\106\0\1\30\103\0\1\31"+
    "\62\0\1\32\2\0\1\33\66\0\1\34\65\0\1\35"+
    "\7\0\1\36\50\0\1\37\66\0\1\40\116\0\1\41"+
    "\12\0\1\42\100\0\1\43\100\0\1\44\76\0\1\45"+
    "\104\0\1\46\63\0\1\47\105\0\1\50\61\0\1\51"+
    "\77\0\1\52\105\0\1\53\40\0\1\54\135\0\1\55"+
    "\46\0\1\56\64\0\1\57\73\0\1\60\127\0\1\61"+
    "\74\0\1\62\105\0\1\63\66\0\1\64\105\0\1\65"+
    "\71\0\1\66\102\0\1\67\67\0\1\70\110\0\1\71"+
    "\25\0\1\72\121\0\1\73\121\0\1\74\24\0\1\75"+
    "\134\0\1\76\75\0\1\77\70\0\1\100\103\0\1\101"+
    "\75\0\1\102\50\0\1\103\116\0\1\104\70\0\1\105"+
    "\57\0\1\106\117\0\1\107\12\0\1\110\60\0\1\111"+
    "\55\0\1\112\112\0\1\113\113\0\1\114\70\0\1\115"+
    "\53\0\1\116\117\0\1\117\75\0\1\120\66\0\1\121"+
    "\107\0\1\122\36\0\1\123\132\0\1\124\100\0\1\125"+
    "\104\0\1\126\26\0\1\127\122\0\1\130\73\0\1\131"+
    "\75\0\1\132\103\0\1\133\67\0\1\134\113\0\1\135"+
    "\57\0\1\136\101\0\1\137\65\0\1\140\110\0\1\141"+
    "\103\0\1\142\37\0\1\143\112\0\1\144\107\0\1\145"+
    "\77\0\1\146\70\0\1\147\4\0\1\150\66\0\1\151"+
    "\110\0\1\152\106\0\1\153\104\0\1\154\45\0\1\155"+
    "\44\0\1\156\150\0\1\157\103\0\1\160\53\0\1\161"+
    "\71\0\1\162\101\0\1\163\71\0\1\164\103\0\1\165"+
    "\65\0\1\166\63\0\1\167\140\0\1\170\55\0\1\171"+
    "\63\0\1\172\42\0\1\173\162\0\1\174\51\0\1\175"+
    "\70\0\1\176\105\0\1\177\65\0\1\200\75\0\1\201"+
    "\102\0\1\202\76\0\1\203\121\0\1\204\54\0\1\205"+
    "\33\0\1\206\160\0\1\207\50\0\1\210\111\0\1\211"+
    "\61\0\1\212\64\0\1\213\104\0\1\214\125\0\1\215"+
    "\11\0\1\216\161\0\1\217\54\0\1\220\45\0\1\221"+
    "\125\0\1\222\67\0\1\223\64\0\1\224\136\0\1\225"+
    "\57\0\1\226\113\0\1\227\47\0\1\230\102\0\1\231"+
    "\70\0\1\232\71\0\1\233\42\0\1\234\151\0\1\235"+
    "\63\0\1\236\107\0\1\237\53\0\1\240\74\0\1\241"+
    "\52\0\1\242\144\0\1\243\20\0\1\244\152\0\1\245"+
    "\45\0\1\246\106\0\1\247\115\0\1\250\57\0\1\251"+
    "\113\0\1\252\47\0\1\253\110\0\1\254\111\0\1\255"+
    "\43\0\1\256\127\0\1\257\55\0\1\260\75\0\1\261"+
    "\116\0\1\262\57\0\1\263\113\0\1\264\56\0\1\265"+
    "\60\0\1\266\76\0\1\267\53\0\1\270\72\0\1\271"+
    "\77\0\1\272\100\0\1\273\113\0\1\274\114\0\1\275"+
    "\57\0\1\276\51\0\1\277\72\0\1\300\70\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[10664];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\3\1\3\11\10\1\15\0"+
    "\1\11\34\0\1\11\36\0\1\11\1\0\1\11\34\0"+
    "\1\11\1\0\1\11\3\0\1\11\4\0\1\11\21\0"+
    "\1\11\1\0\1\11\7\0\1\11\16\0\1\11\3\0"+
    "\1\11\1\0\1\11\1\0\1\11\6\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[192];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    private Symbol symbol(int type) {
        return new Symbol(type, yyline, yycolumn);
    }

    private Symbol symbol(int type, Object value) {
        return new Symbol(type, yyline, yycolumn, value);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { throw new Error("Illegal character <" + yytext() + ">");
            }
          // fall through
          case 22: break;
          case 2:
            { /* Ignore whitespace */
            }
          // fall through
          case 23: break;
          case 3:
            { System.out.print(yytext()); return symbol(sym.COMMA, yytext());
            }
          // fall through
          case 24: break;
          case 4:
            { System.out.print(yytext()); return symbol(sym.COLON, yytext());
            }
          // fall through
          case 25: break;
          case 5:
            { System.out.print(yytext()); return symbol(sym.SEMICOLON, yytext());
            }
          // fall through
          case 26: break;
          case 6:
            { System.out.print(yytext()); return symbol(sym.ASIGNATION_TOKEN, yytext());
            }
          // fall through
          case 27: break;
          case 7:
            { System.out.print(yytext()); return symbol(sym.REPETITIONS, yytext());
            }
          // fall through
          case 28: break;
          case 8:
            { System.out.print(yytext()); return symbol(sym.PERSONA, yytext());
            }
          // fall through
          case 29: break;
          case 9:
            { System.out.print(yytext()); return symbol(sym.TACTICA, yytext());
            }
          // fall through
          case 30: break;
          case 10:
            { System.out.print(yytext()); return symbol(sym.PERSON_ID, yytext());
            }
          // fall through
          case 31: break;
          case 11:
            { System.out.print(yytext()); return symbol(sym.ASIGNACION, yytext());
            }
          // fall through
          case 32: break;
          case 12:
            { System.out.print(yytext()); return symbol(sym.JUEGO_LIBRE, yytext());
            }
          // fall through
          case 33: break;
          case 13:
            { System.out.print(yytext()); return symbol(sym.TEAM, yytext());
            }
          // fall through
          case 34: break;
          case 14:
            { System.out.print(yytext()); return symbol(sym.CALENTAMIENTO, yytext());
            }
          // fall through
          case 35: break;
          case 15:
            { System.out.print(yytext()); return symbol(sym.ENTRENAMIENTO, yytext());
            }
          // fall through
          case 36: break;
          case 16:
            { System.out.print(yytext()); return symbol(sym.PERSON_ATTRIBUTES, yytext());
            }
          // fall through
          case 37: break;
          case 17:
            { System.out.print(yytext()); return symbol(sym.PLAN_ENTRENAMIENTO, yytext());
            }
          // fall through
          case 38: break;
          case 18:
            { System.out.print(yytext()); return symbol(sym.PERSON_ROLE, yytext());
            }
          // fall through
          case 39: break;
          case 19:
            { System.out.print(yytext()); return symbol(sym.PASS_CONDITION, yytext());
            }
          // fall through
          case 40: break;
          case 20:
            { System.out.print(yytext()); return symbol(sym.ACTIVITY, yytext());
            }
          // fall through
          case 41: break;
          case 21:
            { System.out.print(yytext()); return symbol(sym.STRING_ATTRIBUTES, yytext());
            }
          // fall through
          case 42: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
